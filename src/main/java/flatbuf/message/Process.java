// automatically generated by the FlatBuffers compiler, do not modify

package flatbuf.message;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Process extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_8(); }
  public static Process getRootAsProcess(ByteBuffer _bb) { return getRootAsProcess(_bb, new Process()); }
  public static Process getRootAsProcess(ByteBuffer _bb, Process obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Process __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String factory() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer factoryAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer factoryInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String namespace() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer namespaceAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer namespaceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public String name() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public String id() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  public double version() { int o = __offset(12); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public String loopmode() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer loopmodeAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer loopmodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  public Output ouputs(int j) { return ouputs(new Output(), j); }
  public Output ouputs(Output obj, int j) { int o = __offset(16); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int ouputsLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public Output.Vector ouputsVector() { return ouputsVector(new Output.Vector()); }
  public Output.Vector ouputsVector(Output.Vector obj) { int o = __offset(16); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public Input inputs(int j) { return inputs(new Input(), j); }
  public Input inputs(Input obj, int j) { int o = __offset(18); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int inputsLength() { int o = __offset(18); return o != 0 ? __vector_len(o) : 0; }
  public Input.Vector inputsVector() { return inputsVector(new Input.Vector()); }
  public Input.Vector inputsVector(Input.Vector obj) { int o = __offset(18); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public String title() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer titleAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer titleInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }

  public static int createProcess(FlatBufferBuilder builder,
      int factoryOffset,
      int namespaceOffset,
      int nameOffset,
      int idOffset,
      double version,
      int loopmodeOffset,
      int ouputsOffset,
      int inputsOffset,
      int titleOffset) {
    builder.startTable(9);
    Process.addVersion(builder, version);
    Process.addTitle(builder, titleOffset);
    Process.addInputs(builder, inputsOffset);
    Process.addOuputs(builder, ouputsOffset);
    Process.addLoopmode(builder, loopmodeOffset);
    Process.addId(builder, idOffset);
    Process.addName(builder, nameOffset);
    Process.addNamespace(builder, namespaceOffset);
    Process.addFactory(builder, factoryOffset);
    return Process.endProcess(builder);
  }

  public static void startProcess(FlatBufferBuilder builder) { builder.startTable(9); }
  public static void addFactory(FlatBufferBuilder builder, int factoryOffset) { builder.addOffset(0, factoryOffset, 0); }
  public static void addNamespace(FlatBufferBuilder builder, int namespaceOffset) { builder.addOffset(1, namespaceOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(2, nameOffset, 0); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(3, idOffset, 0); }
  public static void addVersion(FlatBufferBuilder builder, double version) { builder.addDouble(4, version, 0.0); }
  public static void addLoopmode(FlatBufferBuilder builder, int loopmodeOffset) { builder.addOffset(5, loopmodeOffset, 0); }
  public static void addOuputs(FlatBufferBuilder builder, int ouputsOffset) { builder.addOffset(6, ouputsOffset, 0); }
  public static int createOuputsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startOuputsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addInputs(FlatBufferBuilder builder, int inputsOffset) { builder.addOffset(7, inputsOffset, 0); }
  public static int createInputsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startInputsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTitle(FlatBufferBuilder builder, int titleOffset) { builder.addOffset(8, titleOffset, 0); }
  public static int endProcess(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishProcessBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedProcessBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Process get(int j) { return get(new Process(), j); }
    public Process get(Process obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

